
'''
    闭包是指在函数声明时的作用域以外的地方被调用的函数
　　在函数声明时的作用域以外的地方调用函数，需要通过将该函数作为返回值或者作为参数被传递
    闭包需要满足三个条件： 1.函数嵌套; 2.内部函数可以调用到外层函数的变量,即访问所在作用域;
    3.return 内层不动手. ###第8_--19行即闭包
'''
arg = '全局变量中的arg'  # 定义的全局变量arg是全局作用域
def outer():  #第8_--19行即闭包
    print(arg)  # 定义局部变量arg是局部作用域
    # global arg
    # arg+='outer'
    def inner():
        #global arg
        print(arg)  #1.调用arg变量时当自己方法中没有这个变量,默认会逐层向外去找这个arg变量
                    #2.当上层没有这个变量时,会报错,
                    #3.当局部变量与全局变量同时有这个变量时,使用的局部变量
                    #4.如果要使用全局变量时,需要声明这个全局变量 global arg(见上第9行)
                    #5.如果要使用 局部变量与全局变量改变后的变量arg+,需要在当前函数中声明global arg(见上第6\7行)
    return inner  # 为什么要return? return的是什么?
                       # 闭包满足条件之一:return上楼不动手 一般()为实现,立即执行
                       # return inner 没有加括号,即返回的是这个函数体的对象不会立即执行
ot = outer()        # 这是什么意思?创建方法?
                    # 用ot来接收这inner这个函数体的对象

ot()  # 这是谁调的?  等同于 outer()()
      # 对inner对象进行实现